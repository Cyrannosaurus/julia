// DO NOT EDIT! This file is automatically generated by llvm-dialects-tblgen.


#ifdef GET_INCLUDES
#undef GET_INCLUDES
#include "llvm-dialects/Dialect/Dialect.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Instructions.h"

namespace llvm {
class raw_ostream;
template <typename T> class ArrayRef;
template <typename T> class iterator_range;
} // namespace llvm

namespace llvm_dialects {
class Builder;
} // namespace llvm_dialects
#endif // GET_INCLUDES

#ifdef GET_DIALECT_DECLS
#undef GET_DIALECT_DECLS

namespace julia {


    class JuliaDialect : public ::llvm_dialects::DialectImpl<JuliaDialect> {
      friend DialectImpl;
      friend ::llvm_dialects::DialectContext;

      void anchor() override;

    public:
      static Key& getKey();

    private:
      JuliaDialect(::llvm::LLVMContext& context);

      static ::llvm_dialects::Dialect* make(::llvm::LLVMContext& context);
  
      public:
        ::llvm::AttributeList getAttributeList(size_t index) const {
          return m_attributeLists[index];
        }

      private:
        ::std::array<::llvm::AttributeList, 1> m_attributeLists;
    };

    class JuliaValue : public ::llvm::TargetExtType {
      static constexpr ::llvm::StringLiteral s_name{"julia.jlvalue"};

    public:
      static bool classof(const ::llvm::TargetExtType *t) {
        return t->getName() == s_name;
      }
      static bool classof(const ::llvm::Type* t) {
        return llvm::isa<::llvm::TargetExtType>(t) &&
                classof(llvm::cast<::llvm::TargetExtType>(t));
      }

      bool verifier(::llvm::raw_ostream &errs) const;

  static JuliaValue *get(::llvm::LLVMContext & ctx);

};


      class GetPGCStack : public ::llvm::CallInst {
        static const ::llvm::StringLiteral s_name; //{"julia.get_pgcstack"};

      public:
        static bool classof(const ::llvm::CallInst* i) {
          return ::llvm_dialects::detail::isSimpleOperation(i, s_name);
        }
        static bool classof(const ::llvm::Value* v) {
          return ::llvm::isa<::llvm::CallInst>(v) &&
                 classof(::llvm::cast<::llvm::CallInst>(v));
        }
    static GetPGCStack* create(::llvm_dialects::Builder& b, ::llvm::Type* resultType);

bool verifier(::llvm::raw_ostream &errs);


::llvm::Value * getResult();


      };
    } // namespace julia

#endif // GET_DIALECT_DECLS
